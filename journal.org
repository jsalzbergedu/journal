#+Title: Programming Journal
#+Author: Jacob Salzberg

Hello and welcome to my programming journal!


* Snippets
** Java
**** JNR
***** Spawn a process
#+Begin_src java
import jnr.posix.POSIX;
import jnr.posix.POSIXFactory;
import jnr.posix.SpawnFileAction;

public Class {
    public static void main(String[] args) {
        ArrayList<String> env = new ArrayList<String>();
        for (Map.Entry<String, String> pair : System.getenv().entrySet()) {
            env.add(String.format("%s=%s", pair.getKey(), pair.getValue()));
        }

        long childPID = posix.posix_spawnp("./doot.sh",
                                           new ArrayList<SpawnFileAction>(),
                                           new ArrayList<String>(), env);
    }
#+End_src
**** Immutables
***** GSON subtyping
#+Begin_src Java
@Gson.ExpectedSubtypes({Open.class, Close.class})
#+End_src
**** MultiJ
***** Expression problem
#+begin_src Java
/**
 * The main class of the program.
 * @author Jacob Salzberg
 */
public class MultiJExpressionProblem {
    public static Expr expression =
            Sum.from(Sum.from(Lit.from(1), Lit.from(2)), Lit.from(3));

    public static Expr expression2 =
            Sum.from(Mul.from(Sum.from(Lit.from(1), Lit.from(2)),
                              Lit.from(3)),
                     Lit.from(4));

    /**
     * The entry point of the program.
     * @param args Command line arguments. Not used.
     */
    public static void main(String[] args) {
        ExprEval eval1 = org.multij.MultiJ.instance(ExprEval.class);
        ExprView view1 = org.multij.MultiJ.instance(ExprView.class);
        System.out.println("The result of: " + view1.view(expression));
        System.out.println("is " + eval1.eval(expression));
        MulView view2 = org.multij.MultiJ.instance(MulView.class);
        MulEval eval2= org.multij.MultiJ.instance(MulEval.class);
        System.out.println("The result of: " + view2.view(expression2));
        System.out.println("is " + eval2.eval(expression2));
    }

    public interface Expr {
    }

    public interface Lit extends Expr {
        public int lit();
        public static Lit from(int x) {
            return new Lit() {
                @Override
                public int lit() {
                    return x;
                }
            };
        }
    }

    public interface Sum extends Expr {
        Expr augend();
        Expr addend();
        public static Sum from(Expr augend, Expr addend) {
            return new Sum() {
                @Override
                public Expr augend() {
                    return augend;
                }

                @Override
                public Expr addend() {
                    return addend;
                }
            };
        }
    }

    @org.multij.Module
    public interface ExprEval {
        default int eval(Expr expr) {
            throw new IllegalArgumentException("Incorrect type dispatched.");
        }

        default int eval(Lit expr) {
            return expr.lit();
        }

        default int eval(Sum expr) {
            return eval(expr.augend()) + eval(expr.addend());
        }
    }

    @org.multij.Module
    public interface ExprView {
        default String view(Expr expr) {
            throw new IllegalArgumentException("Incorrect type dispatched.");
        }

        default String view(Lit expr) {
            return expr.lit() + "";
        }

        default String view(Sum expr) {
            return "(" +
                    view(expr.augend()) +
                    " + " +
                    view(expr.addend()) +
                    ")";
        }
    }

    public interface Mul extends Expr {
        Expr multiplier();
        Expr multiplicand();
        public static Mul from(Expr multiplier, Expr multiplicand) {
            return new Mul() {
                @Override
                public Expr multiplier() {
                    return multiplier;
                }

                @Override
                public Expr multiplicand() {
                    return multiplicand;
                }
            };
        }
    }

    @org.multij.Module
    public interface MulEval extends ExprEval {
        default int eval(Mul expr) {
            return eval(expr.multiplier()) * eval(expr.multiplicand());
        }
    }

    @org.multij.Module
    public interface MulView extends ExprView {
        default String view(Mul expr) {
            return "(" +
                    view(expr.multiplier()) +
                    " * " +
                    view(expr.multiplicand()) +
                    ")";
        }
    }
}
#+end_src
** Idris
*** Final Tagless Interpreter
Based on [[https://oleksandrmanzyuk.wordpress.com/2014/06/18/from-object-algebras-to-finally-tagless-interpreters-2/][this blog post]].
#+begin_src Idris
-- Final tagless interpreter notes

interface ExpAlg a where
  total lit : Int -> a
  total add : a -> a -> a

expressionOne : ExpAlg a => a
expressionOne = add (lit 1)
                    (add (lit 2)
                         (lit 3))

data Evaluate = Eval Int

ExpAlg Evaluate where
  lit n = Eval n
  add x y = case (x, y) of
    (Eval a, Eval b) => Eval $ a + b

interface ExpAlg a => MulAlg a where
  total mul : a -> a -> a

MulAlg Evaluate where
  mul x y = case (x, y) of
    (Eval a, Eval b) => Eval $ a * b

data ViewHolder = View String

ExpAlg ViewHolder where
  lit n = View $ show n
  add x y = case (x, y) of
    (View x, View y) => View $ "(" ++ x ++ " + " ++ y ++ ")"


MulAlg ViewHolder where
  mul x y = case (x, y) of
    (View x, View y) => View $ "(" ++ x ++ " * " ++ y ++ ")"

expressionTwo : MulAlg a => a
expressionTwo = add (lit 1)
                (mul (lit 2)
                     (lit 3))

iResultOfExpOne : Evaluate
iResultOfExpOne = expressionOne

iResultOfExpTwo : Evaluate
iResultOfExpTwo = expressionTwo


sResultOfExpOne : ViewHolder
sResultOfExpOne = expressionOne

sResultOfExpTwo : ViewHolder
sResultOfExpTwo = expressionTwo
#+end_src
